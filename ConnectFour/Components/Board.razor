@using System.Drawing
@using ConnectFour.Models;
@inject GameState State;

<HeadContent>
    <style>
        :root {
            --board-bg: @ColorTranslator.ToHtml(BoardColor);
            --player1: @ColorTranslator.ToHtml(Player1Color);
            --player2: @ColorTranslator.ToHtml(Player2Color);
        }
    </style>
</HeadContent>

<h3>Board</h3>

<!-- 게임말 놓을 위치를 알려줌 -->
<nav>
    @for (byte i = 0; i < 7; i++)
    {
        var col = i;
        <span title="Click to play a piece" @onclick="() => PlayPiece(col)">🔽</span>
    }
</nav>

<!-- 게임 상태관리 -->
<article>
    @winnerMessage  <button style="@ResetStyle" @onclick="ResetGame">Reset the game</button>
    <!-- 1) ResetStyle 상태가 동적으로 바뀌지 않음 -->
    <br />
    <span class="alert-danger">@errorMessage</span>
    <span class="alert-info">@CurrentTurn</span>
</article>

<div>
    <!-- 게임보드판 바탕 -->
    <div class="board"> 
    @for (var i = 0; i < 42; i++)
    {
        <!-- 게임말 위치 -->
        <span class="container">
            <span></span>
        </span>
    }
    </div>
    <!-- 게임말 -->
    @for (var i = 0; i < 42; i++)
    {
       <span class="@pieces[i]"></span>
    }

</div>

@code {

    /** 컴포넌트 변수 **/
    // 컴포넌트 파라미터
    [Parameter]
    public Color BoardColor { get; set; } = ColorTranslator.FromHtml("yellow"); //디폴트값

    [Parameter]
    public Color Player1Color { get; set; } = ColorTranslator.FromHtml("red");

    [Parameter]
    public Color Player2Color { get; set; } = ColorTranslator.FromHtml("blue");

    /** 사용자정의 변수 **/
    // 게임 보드판
    private string[] pieces = new string[42];

    // 게임 상태관리
    private string winnerMessage = string.Empty;
    private string errorMessage = string.Empty;

    /** 컴포넌트 라이프사이클 **/
    // 게임초기화
    protected override void OnInitialized() 
    {
        State.ResetBoard();
    }

    /** 사용자 정의 함수 **/
    // 게임진행
    private void PlayPiece(byte col)
    {
        errorMessage = string.Empty;

        // 종료여부 확인
        winnerMessage = State.CheckForWin() switch
        {
            GameState.WinState.Player1_Wins => "Player 1 Wins!",
            GameState.WinState.Player2_Wins => "Player 2 Wins!",
            GameState.WinState.Tie => "It's a tie!",
            _ => ""
        };

        // 게임진행
        try
        {
            var player = State.PlayerTurn;
            var turn = State.CurrentTurn;
            var landingRow = State.PlayPiece(col);
            pieces[turn] = $"player{player} col{col} drop{landingRow}";
        }
        catch (ArgumentException ex)
        {
            errorMessage = ex.Message;
        }
    }

    // 상태관리
    private string CurrentTurn => (winnerMessage == string.Empty) ? $"Player {State.PlayerTurn}'s Turn" : "";
    private string ResetStyle => (winnerMessage == string.Empty) ? "display: none;" : "";

    void ResetGame()
    {
        State.ResetBoard();
        winnerMessage = string.Empty;
        errorMessage = string.Empty;
        pieces = new string[42];
    }
}